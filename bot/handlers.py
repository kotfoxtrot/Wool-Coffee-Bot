from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime
import logging
from .sheets_manager import SheetsManager

logger = logging.getLogger(__name__)


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = """
‚òïÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∏—Å—Ç–∫–æ–π –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è!

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ —á–∏—Å—Ç–∫–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –≤ –∫–æ—Ñ–µ–π–Ω–µ.

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/tasks - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
/history - –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á (7 –¥–Ω–µ–π)
/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

–ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –Ω–∞ –¥–µ–Ω—å.
–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å –∑–∞–¥–∞—á—É!
    """
    await update.message.reply_text(welcome_text)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
/tasks - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
/history - –ò—Å—Ç–æ—Ä–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üîî –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:
‚Ä¢ –ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ —è –ø—Ä–æ–≤–µ—Ä—è—é —Ç–≤–æ—é —Å–º–µ–Ω—É
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ —á–∏—Å—Ç–∫–µ
‚Ä¢ –¢—ã –æ—Ç–º–µ—á–∞–µ—à—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∫–Ω–æ–ø–∫–∞–º–∏
‚Ä¢ –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü—É

‚ö†Ô∏è –í–∞–∂–Ω–æ:
‚Ä¢ –ö—Ä–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç = –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
‚Ä¢ ‚úÖ = –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
‚Ä¢ ‚è≥ = –∑–∞–¥–∞—á–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏
    """
    await update.message.reply_text(help_text)


async def tasks_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sheets_manager: SheetsManager = context.bot_data['sheets_manager']
    username = update.effective_user.username
    
    if not username:
        await update.message.reply_text(
            "‚ùå –£ —Ç–µ–±—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Telegram username. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram."
        )
        return
    
    today = datetime.now()
    shifts = sheets_manager.get_today_shifts(today)
    
    user_shift = next((s for s in shifts if s['username'].lower() == username.lower()), None)
    
    if not user_shift:
        await update.message.reply_text(
            f"üìÖ –ù–∞ {today.strftime('%d.%m.%Y')} —É —Ç–µ–±—è –Ω–µ—Ç —Å–º–µ–Ω—ã –∏–ª–∏ —Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ."
        )
        return
    
    tasks = sheets_manager.get_tasks_for_today(today)
    
    if not tasks:
        await update.message.reply_text(
            f"‚ú® –ù–∞ {today.strftime('%d.%m.%Y')} –Ω–µ—Ç –∑–∞–¥–∞—á –ø–æ —á–∏—Å—Ç–∫–µ!"
        )
        return
    
    message_text, keyboard = _build_tasks_message(tasks, user_shift['name'], today)
    
    await update.message.reply_text(
        message_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )


async def history_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sheets_manager: SheetsManager = context.bot_data['sheets_manager']
    username = update.effective_user.username
    
    if not username:
        await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Telegram username.")
        return
    
    history = sheets_manager.get_history(days=7)
    
    if not history:
        await update.message.reply_text("üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –ø—É—Å—Ç–∞.")
        return
    
    user_history = [h for h in history if username.lower() in h.get('completed_by', '').lower()]
    
    if not user_history:
        await update.message.reply_text("üìú –¢—ã –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª –∑–∞–¥–∞—á –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.")
        return
    
    text = "üìú <b>–ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á (7 –¥–Ω–µ–π):</b>\n\n"
    for item in user_history:
        status_icon = item.get('status', '‚úÖ')
        text += f"{status_icon} <b>{item['name']}</b>\n"
        text += f"   üìÖ {item['date']}\n"
        text += f"   üë§ {item['completed_by']}\n\n"
    
    await update.message.reply_text(text, parse_mode='HTML')


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    sheets_manager: SheetsManager = context.bot_data['sheets_manager']
    
    callback_data = query.data
    
    if not callback_data.startswith('complete_'):
        return
    
    row_index = int(callback_data.split('_')[1])
    username = update.effective_user.username
    
    today = datetime.now()
    shifts = sheets_manager.get_today_shifts(today)
    user_shift = next((s for s in shifts if s['username'].lower() == username.lower()), None)
    
    if not user_shift:
        await query.edit_message_text("‚ùå –¢—ã –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
        return
    
    completed_at = datetime.now()
    success = sheets_manager.mark_task_completed(
        row_index, 
        user_shift['name'], 
        completed_at
    )
    
    if success:
        tasks = sheets_manager.get_tasks_for_today(today)
        message_text, keyboard = _build_tasks_message(tasks, user_shift['name'], today)
        
        await query.edit_message_text(
            message_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
    else:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


def _build_tasks_message(tasks: list, employee_name: str, today: datetime):
    completed_tasks = [t for t in tasks if t['status'] == '‚úÖ']
    total_tasks = len(tasks)
    completed_count = len(completed_tasks)
    
    text = f"‚òïÔ∏è <b>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {employee_name.split()[0]}!</b>\n"
    text += f"–ó–∞–¥–∞—á–∏ –Ω–∞ {today.strftime('%d.%m.%Y')}:\n\n"
    
    keyboard = []
    
    for task in tasks:
        is_completed = task['status'] == '‚úÖ'
        is_overdue = _is_task_overdue(task, today)
        
        if is_completed:
            completed_time = "—Å–µ–≥–æ–¥–Ω—è"
            text += f"‚úÖ <b>{task['name']}</b> (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ {completed_time})\n"
        else:
            if is_overdue:
                days_overdue = _get_days_overdue(task, today)
                text += f"‚è≥ <b>{task['name']}</b> <i>(–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ —Å {task['last_cleaned']}!)</i>\n"
            else:
                text += f"‚è≥ <b>{task['name']}</b>\n"
            
            button = InlineKeyboardButton(
                text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ",
                callback_data=f"complete_{task['row_index']}"
            )
            keyboard.append([button])
    
    text += f"\n<b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_count}/{total_tasks}</b>"
    
    return text, keyboard


def _is_task_overdue(task: dict, today: datetime) -> bool:
    last_cleaned_str = task['last_cleaned']
    frequency = task['frequency'].lower()
    
    if not last_cleaned_str or last_cleaned_str == '-':
        return False
    
    try:
        last_cleaned = datetime.strptime(last_cleaned_str, "%d.%m.%Y")
        days_passed = (today - last_cleaned).days
        
        if frequency == '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ' and days_passed > 1:
            return True
        elif frequency == '–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ' and days_passed > 7:
            return True
        elif frequency == '–µ–∂–µ–º–µ—Å—è—á–Ω–æ' and days_passed > 30:
            return True
    except ValueError:
        return False
    
    return False


def _get_days_overdue(task: dict, today: datetime) -> int:
    last_cleaned_str = task['last_cleaned']
    
    if not last_cleaned_str or last_cleaned_str == '-':
        return 0
    
    try:
        last_cleaned = datetime.strptime(last_cleaned_str, "%d.%m.%Y")
        return (today - last_cleaned).days
    except ValueError:
        return 0