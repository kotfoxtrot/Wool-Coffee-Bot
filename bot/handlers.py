from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime
import logging
import asyncio
from .table_manager import TableManager
from .table_setup import TableSetup
from .config import Config
from .members_manager import MembersManager
from .cache_manager import CacheManager

logger = logging.getLogger(__name__)


async def check_employee(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    members_manager: MembersManager = context.bot_data['members_manager']
    username = update.effective_user.username
    
    if not username:
        await update.message.reply_text(
            "‚ùå –£ —Ç–µ–±—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Telegram username. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram."
        )
        return False
    
    if not members_manager.is_member(username):
        await update.message.reply_text(
            "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –≠—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤."
        )
        return False
    
    return True


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    members_manager: MembersManager = context.bot_data['members_manager']
    table_manager: TableManager = context.bot_data['table_manager']
    
    username = update.effective_user.username
    user_id = update.effective_user.id
    
    if not username:
        await update.message.reply_text(
            "‚ùå –£ —Ç–µ–±—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Telegram username. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram."
        )
        return
    
    employee = table_manager.get_employee_by_username(username)
    
    if not employee:
        await update.message.reply_text(
            "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –≠—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤."
        )
        return
    
    members_manager.add_member(username, user_id, employee['name'])
    
    welcome_text = """
‚òïÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Wool Coffee Bot!

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ —Ä–∞–±–æ—Ç–µ –≤ –∫–æ—Ñ–µ–π–Ω–µ.

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/tasks - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–º–µ–Ω—É
/history - –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á (7 –¥–Ω–µ–π)
/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

–í –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–π —Å–º–µ–Ω—ã —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á.
–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å –∑–∞–¥–∞—á—É!
    """
    await update.message.reply_text(welcome_text)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_employee(update, context):
        return
    
    help_text = """
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
/tasks - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–º–µ–Ω—É
/history - –ò—Å—Ç–æ—Ä–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üîî –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:
‚Ä¢ –í –Ω–∞—á–∞–ª–µ —Å–º–µ–Ω—ã —è –ø—Ä–∏—Å—ã–ª–∞—é —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
‚Ä¢ –¢—ã –æ—Ç–º–µ—á–∞–µ—à—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∫–Ω–æ–ø–∫–∞–º–∏
‚Ä¢ –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü—É

‚ö†Ô∏è –í–∞–∂–Ω–æ:
‚Ä¢ –ö—Ä–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç = –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
‚Ä¢ ‚úÖ = –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
‚Ä¢ ‚è≥ = –∑–∞–¥–∞—á–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏
    """
    await update.message.reply_text(help_text)


async def tasks_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_employee(update, context):
        return
    
    cache_manager: CacheManager = context.bot_data['cache_manager']
    table_manager: TableManager = context.bot_data['table_manager']
    username = update.effective_user.username
    now = datetime.now()
    
    current_shift = cache_manager.get_shift_for_user(username)
    
    if current_shift:
        shift = current_shift
        shift_date = now
        is_current = True
    else:
        next_shift = table_manager.get_user_next_shift(username, now)
        if not next_shift:
            await update.message.reply_text(
                "üìÖ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–º–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π."
            )
            return
        shift = next_shift
        shift_date = shift['date']
        is_current = False
    
    if is_current:
        tasks = cache_manager.get_tasks_for_user(username, shift_date)
    else:
        tasks = table_manager.get_tasks_for_today(shift_date)
    
    if not tasks:
        await update.message.reply_text(
            "–£—Ä–∞! –°–µ–≥–æ–¥–Ω—è –Ω–∏—á–µ–≥–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è üéâ"
        )
        return
    
    message_text, keyboard = _build_tasks_message(tasks, shift, shift_date, is_current)
    
    await update.message.reply_text(
        message_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )


async def history_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_employee(update, context):
        return
    
    table_manager: TableManager = context.bot_data['table_manager']
    username = update.effective_user.username
    
    history = table_manager.get_history(days=7)
    
    if not history:
        await update.message.reply_text("üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –ø—É—Å—Ç–∞.")
        return
    
    user_history = [h for h in history if username.lower() in h.get('completed_by', '').lower()]
    
    if not user_history:
        await update.message.reply_text("üìú –¢—ã –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª –∑–∞–¥–∞—á –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.")
        return
    
    text = "üìú <b>–ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á (7 –¥–Ω–µ–π):</b>\n\n"
    for item in user_history:
        status_icon = item.get('status', '‚úÖ')
        text += f"{status_icon} <b>{item['name']}</b>\n"
        text += f"   üìÖ {item['date']}\n"
        text += f"   üë§ {item['completed_by']}\n\n"
    
    await update.message.reply_text(text, parse_mode='HTML')


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    cache_manager: CacheManager = context.bot_data['cache_manager']
    members_manager: MembersManager = context.bot_data['members_manager']
    username = update.effective_user.username
    
    if not members_manager.is_member(username):
        await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    callback_data = query.data
    
    if not callback_data.startswith('complete_'):
        return
    
    row_index = int(callback_data.split('_')[1])
    
    now = datetime.now()
    shift = cache_manager.get_shift_for_user(username)
    
    if not shift:
        await query.edit_message_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã.")
        return
    
    tasks = cache_manager.get_tasks_for_user(username, now)
    task = next((t for t in tasks if t['row_index'] == row_index), None)
    
    if not task:
        await query.edit_message_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    completed_at = datetime.now()
    
    cache_manager.mark_completed_local(row_index, username, completed_at)
    
    updated_tasks = cache_manager.get_tasks_for_user(username, now)
    message_text, keyboard = _build_tasks_message(updated_tasks, shift, now, True)
    
    await query.edit_message_text(
        message_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )
    
    asyncio.create_task(
        cache_manager.sync_to_sheets(
            row_index,
            shift['name'],
            completed_at,
            task['period']
        )
    )


def _build_tasks_message(tasks: list, shift: dict, shift_date: datetime, is_current: bool):
    completed_tasks = [t for t in tasks if t['status'] == '‚úÖ']
    total_tasks = len(tasks)
    completed_count = len(completed_tasks)
    
    if is_current:
        text = f"‚òïÔ∏è <b>–ó–∞–¥–∞—á–∏ –Ω–∞ —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É</b>\n\n"
        text += f"–°–º–µ–Ω–∞: {shift['start_time']} - {shift['end_time']}\n"
        text += f"–î–∞—Ç–∞: {shift_date.strftime('%d.%m.%Y')}\n\n"
    else:
        text = f"‚òïÔ∏è <b>–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å–º–µ–Ω—É</b>\n\n"
        text += f"–°–º–µ–Ω–∞: {shift['start_time']} - {shift['end_time']}\n"
        text += f"–î–∞—Ç–∞: {shift_date.strftime('%d.%m.%Y')}\n\n"
    
    keyboard = []
    
    for task in tasks:
        is_completed = task['status'] == '‚úÖ'
        is_overdue = _is_task_overdue(task, shift_date)
        
        if is_completed:
            completed_time = "—Å–µ–≥–æ–¥–Ω—è"
            text += f"‚úÖ <b>{task['name']}</b> (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ {completed_time})\n"
        else:
            if is_overdue:
                days = _get_days_overdue(task, shift_date)
                text += f"‚ö†Ô∏è <b>{task['name']}</b> <i>(–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –Ω–∞ {days} –¥–Ω.!)</i>\n"
            else:
                text += f"‚è≥ <b>{task['name']}</b>\n"
            
            button = InlineKeyboardButton(
                text=f"‚úÖ {task['name']}",
                callback_data=f"complete_{task['row_index']}"
            )
            keyboard.append([button])
    
    text += f"\n<b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_count}/{total_tasks}</b>"
    
    return text, keyboard


def _is_task_overdue(task: dict, today: datetime) -> bool:
    next_cleaning_str = task.get('next_cleaning', '')
    
    if not next_cleaning_str or next_cleaning_str == '-':
        return False
    
    try:
        next_cleaning = datetime.strptime(next_cleaning_str, "%d.%m.%Y")
        days_overdue = (today - next_cleaning).days
        return days_overdue > 0
    except ValueError:
        return False


def _get_days_overdue(task: dict, today: datetime) -> int:
    next_cleaning_str = task.get('next_cleaning', '')
    
    if not next_cleaning_str or next_cleaning_str == '-':
        return 0
    
    try:
        next_cleaning = datetime.strptime(next_cleaning_str, "%d.%m.%Y")
        return max(0, (today - next_cleaning).days)
    except ValueError:
        return 0


async def setup_table_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    config: Config = context.bot_data['config']
    
    user_id = update.effective_user.id
    
    if config.admin_user_id is None:
        await update.message.reply_text(
            "‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: –Ω–µ —É–∫–∞–∑–∞–Ω ADMIN_USER_ID –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
        )
        return
    
    if user_id != config.admin_user_id:
        await update.message.reply_text(
            "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
        )
        return
    
    await update.message.reply_text("‚è≥ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ç–∞–±–ª–∏—Ü—ã...")
    
    try:
        table_manager: TableManager = context.bot_data['table_manager']
        members_manager: MembersManager = context.bot_data['members_manager']
        cache_manager: CacheManager = context.bot_data['cache_manager']
        
        table_setup = TableSetup(table_manager.spreadsheet)
        report = table_setup.setup()
        
        table_manager.reload_employees()
        table_manager._initialize_next_cleaning_dates()
        
        synced = members_manager.sync_with_table(table_manager.employees_cache)
        
        await cache_manager.refresh_from_sheets()
        
        await update.message.reply_text(
            f"{report}\n\nüîÑ –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã.\n"
            f"üìù –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(table_manager.employees_cache)}"
        )
        
    except Exception as e:
        logger.error(f"Error in setup_table_command: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ç–∞–±–ª–∏—Ü—ã: {str(e)}")


async def member_update_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    config: Config = context.bot_data['config']
    
    user_id = update.effective_user.id
    
    if config.admin_user_id is None:
        await update.message.reply_text(
            "‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: –Ω–µ —É–∫–∞–∑–∞–Ω ADMIN_USER_ID –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
        )
        return
    
    if user_id != config.admin_user_id:
        await update.message.reply_text(
            "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
        )
        return
    
    await update.message.reply_text("‚è≥ –û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...")
    
    try:
        table_manager: TableManager = context.bot_data['table_manager']
        members_manager: MembersManager = context.bot_data['members_manager']
        cache_manager: CacheManager = context.bot_data['cache_manager']
        
        old_count = len(table_manager.employees_cache)
        
        table_manager.reload_employees()
        
        new_count = len(table_manager.employees_cache)
        
        synced = members_manager.sync_with_table(table_manager.employees_cache)
        
        await cache_manager.refresh_from_sheets()
        
        registered_count = sum(1 for m in members_manager.get_all_members().values() if m['user_id'] is not None)
        
        await update.message.reply_text(
            f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ: {new_count}\n"
            f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {new_count - old_count:+d}\n"
            f"‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤ –±–æ—Ç–µ: {registered_count}\n"
            f"‚Ä¢ –ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {new_count - registered_count}"
        )
        
    except Exception as e:
        logger.error(f"Error in member_update_command: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")